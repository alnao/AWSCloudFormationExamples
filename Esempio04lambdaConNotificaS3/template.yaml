AWSTemplateFormatVersion: '2010-09-09'
Description: Lambda Python invocata da una notifica da S3
# nota: questo esempio non segue best-practices: notifiche da S3 senza usare EventBridge e codice inline (tecniche da evitare)

Parameters:
  State:
    Type: String
    Default: ENABLED
    AllowedValues:
      - ENABLED
      - DISABLED
  BucketName:
    Type: String
    Description: Nome del bucket
    Default: esempio04s3notifica
Resources:
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketName: !Ref BucketName
      MetricsConfigurations:
        - Id: EntireBucket
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: csv
            Function: !GetAtt S3Notification.Arn
#    DeletionPolicy: Retain
  S3Notification:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          import json
          def lambda_handler(event,context):
            for record in event['Records']:
              print("Esecuzione" + json.dumps(event) )
              bucket_name = record['s3']['bucket']['name']
              key_name = record['s3']['object']['key']
              print('Key found: ' + key_name + ' in Bucket: ' + bucket_name)
            return {'statusCode': 200 , 'body': 'OK'}
      Handler: index.lambda_handler
      Role: !GetAtt LambdaIAMRole.Arn
      Runtime: python3.9
      Timeout: 5
  LambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt S3Notification.Arn
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceArn: !Join
      - ''
      - - 'arn:aws:s3:::'
        - !Ref BucketName
  LambdaIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetBucketNotification'
                  - 's3:PutBucketNotification'
                Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref BucketName
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
Outputs:
  StackName:
    Description: Deployed StackName for update
    Value: !Ref AWS::StackName