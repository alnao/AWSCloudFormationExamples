AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Template CloudFormation (c) CherryBank - copia file csv da Formazione_BTV/alberto-input// a RAD-NPL/uat-rds-rad/transitoAlberto/ 
# modello caricato via SAM con il comando 
# $ sam validate
# $ sam build
# $ sam package --s3-bucket alberto-input --output-template-file packagedV1.yaml --s3-prefix REPOSITORY 
# NON LANCAIRE $ aws s3 cp packagedV1.yaml s3://alberto-input/REPOSITORY/
# $ sam deploy --template-file C:\Transito\2022_04\02_AWS\8aprile22sender\packagedV1.yaml --stack-name stack-sf-alberto-8aprile22 --capabilities CAPABILITY_IAM
# nota: --capabilities CAPABILITY_IAM Ã¨ obbligatorio per le regole IAM
# per provare caricamento con comando 
# $ aws s3 cp prova.csv s3://alberto-input/INPUT/prova.csv
# $ sam logs --stack-name stack-sf-alberto-8aprile22
# $ sam delete --stack-name stack-sf-alberto-8aprile22
# da Formazione_BTV/alberto-input// a RAD-NPL/uat-rds-rad/transitoAlberto/
  
Parameters:
  SFName:
    Type: String
    Description: Step funcion name
    Default: sf-alberto-8aprile22
  Environment:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: dev
  SourceBucket:
    Type: String
    Description: Source Bucket
    Default: alberto-input
  SourcePath:
    Type: String
    Description: Source Path
    Default: INPUT
  DestBucket:
    Type: String
    Description: Dest Bucket
    Default: uat-rds-rad
  DestPath:
    Type: String
    Description: DestPath
    Default: transitoAlberto
  SenderAccountId: #RAD
    Type: String
    Description: Sender AccountId
    Default: "740456629644"
  RecieverAccountId:
    Type: String
    Description: Reciever AccountId 
    Default: "001530899754"
  SenderBusName:
    Type: String
    Default: default
  RecieverBusName:
    Type: String
    Default: default
  AwsRegion:
    Type: String
    Default: eu-west-1

#Conditions:
#  FlagCreateS3Bucket: !Equals [!Ref SourceBucket, ""]

Resources:
  # SourceBucketInput:
    # Type: 'AWS::S3::Bucket'
    # #Condition: FlagCreateS3Bucket,
    # DeletionPolicy: Retain
    # #UpdateReplacePolicy: Retain
    # Properties:
      # BucketName: !Ref SourceBucket
      # AccessControl: PublicRead
      # PublicAccessBlockConfiguration:
        # BlockPublicAcls: false
        # BlockPublicPolicy: false
        # IgnorePublicAcls: false
        # RestrictPublicBuckets: false
      # NotificationConfiguration:
        # EventBridgeConfiguration:
          # EventBridgeEnabled: true

  # EventfullBucketPolicy:
    # Type: AWS::S3::BucketPolicy
    # #Condition: FlagCreateS3Bucket,
    # Properties:
      # Bucket: !Ref SourceBucket
      # PolicyDocument:
        # Statement:
        # - Action: "*"
          # Effect: Allow
          # Resource: !Join ["",["arn:aws:s3:::",!Ref SourceBucket,"/*"]]
          # Principal: 
            # AWS: !Sub arn:aws:iam::${RecieverAccountId}:root
        # -  Action: "*"
           # Effect: Allow
           # Resource: !Join ["",["arn:aws:s3:::",!Ref SourceBucket]]
           # Principal: 
            # AWS: !Sub arn:aws:iam::${RecieverAccountId}:root

  TriggerOnFilePutEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: default
      EventPattern:
        source: 
          - "aws.s3"
        detail: 
          eventSource:
            - 's3.amazonaws.com'
          eventName:
            - 'CopyObject'
            - 'PutObject'
          requestParameters:
            bucketName:
              - !Ref SourceBucket
            key:
              - prefix: !Ref SourcePath
      Targets:
        - Id: id1
          Arn: !GetAtt StartLambdaNewFile.Arn

  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref StartLambdaNewFile
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt TriggerOnFilePutEventRule.Arn

#https://stackoverflow.com/questions/70604208/how-to-execute-a-lambda-function-which-copies-objects-from-one-s3-bucket-to-anot
  StartLambdaNewFile:
    Type: 'AWS::Lambda::Function'
    Properties:
      Environment: 
        Variables:
          CDestBucket: !Ref DestBucket
      Code:
        ZipFile: |
          import json
          import boto3
          import urllib
          import os
          #s3_client=boto3.client('s3')
          s3_resource = boto3.resource('s3')
          # lambda function to copy file from 1 s3 to another s3
          def lambda_handler(event, context):
            print("Esecuzione" + json.dumps(event) )
            source_bucket = event['detail']['requestParameters']['bucketName']
            source_key = event['detail']['requestParameters']['key']
            copy_source = {'Bucket': source_bucket,'Key': source_key }
            #specify destination bucket
            destination_bucket_name=os.environ['CDestBucket']
            target_key = source_key
            #write copy statement 
            print ( "Source source_bucket:"+source_bucket+" source_key:"+source_key+" destination_bucket_name:"+ destination_bucket_name)
            s3_resource.Bucket(destination_bucket_name).Object(target_key).copy(copy_source, ExtraArgs={'ACL': 'bucket-owner-full-control'})
            print(" File copy " + source_key + " to " + destination_bucket_name)
            return {
                'statusCode': 300,
                'body': json.dumps('File has been Successfully Copied')
            }
      Handler: index.lambda_handler
      Runtime: python3.8
      MemorySize: 128
      Role: !GetAtt StartLambdaNewFileRole.Arn
  StartLambdaNewFileRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetBucketNotification'
                  - 's3:PutBucketNotification'
                Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref SourceBucket
                  - '/*'
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref SourceBucket
                  - '/*'
              - Effect: Allow
                Action:
                  - 's3:PutObjectAcl'
                  - 's3:PutObject'
                Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref DestBucket
                  - '/*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
Outputs:
  StackName:
    Description: Deployed StackName for update
    Value: !Ref AWS::StackName