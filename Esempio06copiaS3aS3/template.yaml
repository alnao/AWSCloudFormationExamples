AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Es06 Copia file csv da un bucket ad un altro anche se di un account diverso
#  Oltre a questo bisogna lanciare nel bucket di destinazione una configurazione se su account diverso
#  Riferimento https://stackoverflow.com/questions/64492864/aws-lambda-cross-account-policy-for-lambda-function-s3-to-s3-copy
# modello caricato via SAM con il comando 
# $ sam validate
# $ sam build
# $ sam package --output-template-file packagedV1.yaml --s3-prefix REPOSITORY --s3-bucket alberto-input
# $ sam deploy --template-file .\packagedV1.yaml --stack-name esempio06copias3as3 --capabilities CAPABILITY_IAM
# opzionali: $ sam deploy --template-file .\packagedV1.yaml --stack-name esempio06copias3as3 --capabilities CAPABILITY_IAM --parameter-overrides DestBucket=uat-rds-rad
# nota: --capabilities CAPABILITY_IAM Ã¨ obbligatorio per le regole IAM
# per provare caricamento con comando 
# $ aws s3 cp ../Esempio04s3NotificaLamba/prova.csv s3://bucket-invio/INPUT.csv
# $ sam logs --stack-name esempio06copias3as3
# $ sam delete --stack-name esempio06copias3as3
# da XX/CX/ a YY/CY/
# se si ottiene Access Denied in fase di caricamento
# bisogna ricordarsi di aggiungere al bucket di destinazione la regola IAM-RULE
# ada
# {
# "Effect": "Allow",
# "Principal": {
# "AWS": "arn:aws:lambda:eu-west-1:740456629644:function:esempio06copias3as3-StartLambdaNewFile-ExwkPR4nV1lW"
# },
# "Action": "*",
# "Resource": [
# "arn:aws:s3:::uat-rds-rad",
# "arn:aws:s3:::uat-rds-rad/*"
# ]
# },
Parameters:
  SFName:
    Type: String
    Description: Step funcion name
    Default: esempio06copias3as3
  Environment:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: dev
  SourceBucket:
    Type: String
    Description: Source Bucket
    Default: z-formazionees6-invio
  SourcePath:
    Type: String
    Description: Source Path
    Default: INPUT
  DestBucket:
    Type: String
    Description: Dest Bucket
    Default: uat-rds-rad #bucket-destinazione
#  DestPath:
#    Type: String
#    Description: DestPath
#    Default: OUTPUT
  SenderAccountId: 
    Type: String
    Description: Sender AccountId
    Default: "740456629644"
  RecieverAccountId:
    Type: String
    Description: Reciever AccountId 
    Default: "001530899754"
  SenderBusName:
    Type: String
    Default: default
  RecieverBusName:
    Type: String
    Default: default
  AwsRegion:
    Type: String
    Default: eu-west-1
#Conditions:
#  FlagCreateS3Bucket: !Equals [!Ref SourceBucket, ""]
Resources:
  SourceBucketInput:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    Properties:
      BucketName: !Ref SourceBucket
      AccessControl: PublicRead
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
  EventfullBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref SourceBucket
      PolicyDocument:
        Statement:
        - Action: "*"
          Effect: Allow
          Resource: !Join ["",["arn:aws:s3:::",!Ref SourceBucket,"/*"]]
          Principal: 
            AWS: !Sub arn:aws:iam::${RecieverAccountId}:root
        -  Action: "*"
           Effect: Allow
           Resource: !Join ["",["arn:aws:s3:::",!Ref SourceBucket]]
           Principal: 
            AWS: !Sub arn:aws:iam::${RecieverAccountId}:root
  TriggerOnFilePutEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: default
      EventPattern: 
        source: 
          - "aws.s3"
        detail-type:
          - "Object Created"
        detail: 
          bucket:
            name: 
              - !Ref SourceBucket
          object:
            key:
              - prefix: !Ref SourcePath
      Targets:
        - Id: id1
          Arn: !GetAtt StartLambdaNewFile.Arn
  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref StartLambdaNewFile
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt TriggerOnFilePutEventRule.Arn

  #see https://stackoverflow.com/questions/70604208/how-to-execute-a-lambda-function-which-copies-objects-from-one-s3-bucket-to-anot
  StartLambdaNewFile:
    Type: 'AWS::Lambda::Function'
    Properties:
      Environment: 
        Variables:
          CDestBucket: !Ref DestBucket
#          CDestPath : !Ref DestPath
      Code:
        ZipFile: |
          import json
          import boto3
          import urllib
          import os
          #s3_client=boto3.client('s3')
          s3_resource = boto3.resource('s3')
          # lambda function to copy file from 1 s3 to another s3
          def lambda_handler(event, context):
            print("Esecuzione" + json.dumps(event) )
            source_bucket = event['detail']['bucket']['name']
            source_key = event['detail']['object']['key']
            copy_source = {'Bucket': source_bucket,'Key': source_key }
            #specify destination bucket and target key
            destination_bucket_name=os.environ['CDestBucket']
            target_key = source_key
            #write copy statement 
            print ( "Source source_bucket:"+source_bucket+" source_key:"+source_key+" destination_bucket_name:"+ destination_bucket_name)
            s3_resource.Bucket(destination_bucket_name).Object(target_key).copy(copy_source, ExtraArgs={'ACL': 'bucket-owner-full-control'})
            print(" File copy " + source_key + " to " + destination_bucket_name)
            return {
                'statusCode': 300,
                'body': json.dumps('File has been Successfully Copied')
            }
      Handler: index.lambda_handler
      Runtime: python3.8
      MemorySize: 128
      Role: !GetAtt StartLambdaNewFileRole.Arn
  StartLambdaNewFileRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetBucketNotification'
                  - 's3:PutBucketNotification'
                Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref SourceBucket
                  - '/*'
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref SourceBucket
                  - '/*'
              - Effect: Allow
                Action:
                  - 's3:PutObjectAcl'
                  - 's3:PutObject'
                Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref DestBucket
                  - '/*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
Outputs:
  StackName:
    Description: Deployed StackName for update
    Value: !Ref AWS::StackName