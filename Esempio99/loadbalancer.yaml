Description: Simple Appliaction load balancer with auto scalingin 80 http
#see examples
#see https://s3.eu-west-1.amazonaws.com/cloudformation-templates-eu-west-1/WordPress_Multi_AZ.template
# and see
#see https://github.com/aws-samples/ecs-refarch-cloudformation/blob/master/infrastructure/load-balancers.yaml
#see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-loadbalancer.html
#see https://github.com/awslabs/aws-cloudformation-templates/blob/master/aws/services/ElasticLoadBalancing/ELBGuidedAutoScalingRollingUpgrade.yaml
#see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html
#see https://dheeraj3choudhary.com/deploy-aws-cloudformation-templates-using-aws-cli-or-create-launch-configuration-along-with-security-group-and-autoscaling-group
#see https://github.com/dheeraj3choudhary/AWS-Cloudformation/blob/main/autoscaling_launchconfig.yaml
#see https://github.com/dheeraj3choudhary/AWS-Cloudformation/blob/main/elb.yaml

Parameters:
  WebServerCapacityMin:
    Default: '1'
    Description: The initial number of WebServer instances
    Type: Number
    MinValue: '1'
    MaxValue: '5'
    ConstraintDescription: must be between 1 and 5 EC2 instances.
  WebServerCapacityMax:
    Default: '5'
    Description: The initial number of WebServer instances
    Type: Number
    MinValue: '1'
    MaxValue: '5'
    ConstraintDescription: must be between 1 and 5 EC2 instances.
  WebServerCapacity:
    Default: '2'
    Description: The initial number of WebServer instances
    Type: Number
    MinValue: '1'
    MaxValue: '5'
    ConstraintDescription: must be between 1 and 5 EC2 instances.
  KeyName:
    Type: String
    Default: 'AlbertoNaoFormazione'
  EC2Ami:
    Type: String
    Default: ami-015232c01a82b847b #ami-0b4b7dae3cafc3b88 #
  InstanceType:
    Type: String
    Default: 't2.micro'
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Choose which VPC the Application should be deployed to
  PrivateSubnet1:
    Description: PrivateSubnet1
    Type: String
  PrivateSubnet2:
    Description: PrivateSubnet2
    Type: String

Resources:
  LBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Load balancer traffic
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      VpcId: !Ref VpcId #LAMPesVPC.Outputs.VPC
      Tags:
      - Key: "Name"
        Value: "LBSecurityGroup" #!Ref AWS::StackName #"LAMPesASG" 
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EC2 traffic, ssh in VPC & 80 from LB
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref SSHLocation
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        SourceSecurityGroupId: !Ref LBSecurityGroup
      VpcId: !Ref VpcId #LAMPesVPC.Outputs.VPC
      Tags:
      - Key: "Name"
        Value: "InstanceSecurityGroup"
  WebServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref 'DescribeHealthRole']
  DescribeHealthRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: describe-instance-health-policy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ['elasticloadbalancing:DescribeInstanceHealth']
            Resource: '*'
#see https://github.com/aws-samples/ecs-refarch-cloudformation/blob/master/infrastructure/load-balancers.yaml
#see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-loadbalancer.html
  Balancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      LoadBalancerAttributes: #see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-elasticloadbalancingv2-loadbalancer-loadbalancerattributes.html
        - Key: deletion_protection.enabled
          Value: false
      Name: 'Esempio25balancer'
      #Scheme: internet-facing
      SecurityGroups: 
        - !GetAtt LBSecurityGroup.GroupId
      Subnets: 
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      #Type: application | gateway | network
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName 
  BalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref Balancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: 'Esempio25balancer' #!Ref AWS::StackName 
      VpcId: !Ref VpcId
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName 
#see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-autoscaling.html
  WebServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
        Count: '2'
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: '1'
        MinInstancesInService: '1'
        PauseTime: PT15M
        WaitOnResourceSignals: 'true'
    Properties:
      # AvailabilityZones: !GetAZs '' https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-as-group.html#cfn-as-group-availabilityzones
      LaunchConfigurationName: !Ref LaunchConfig
      #LaunchTemplate: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-autoscaling-autoscalinggroup-launchtemplatespecification.html
      #  LaunchTemplateId: !Ref LaunchConfig
      #  Version: !GetAtt LaunchConfig.LatestVersionNumber #https://stackoverflow.com/questions/59541023/launch-ec2-using-cloudformation-which-should-use-launch-template
      MinSize: !Ref WebServerCapacityMin
      MaxSize: !Ref WebServerCapacityMax
      DesiredCapacity: !Ref WebServerCapacity
      #LoadBalancerNames:
      #- !Ref Balancer
      VPCZoneIdentifier: 
      - !Ref PrivateSubnet1
      - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName 
          PropagateAtLaunch: true
      TargetGroupARNs:
      - !Ref TargetGroup
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          full_install: [install_cfn, install_app, verify_instance_health]
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Join ['', ['[main]

                    ', stack=, !Ref 'AWS::StackId', '

                    ', region=, !Ref 'AWS::Region', '

                    ']]
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join 
                - ''
                - - |
                    [cfn-auto-reloader-hook]
                  - |
                    triggers=post.update
                  - >
                    path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init
                  - 'action=/opt/aws/bin/cfn-init -v '
                  - '         --stack '
                  - !Ref 'AWS::StackName'
                  - '         --resource LaunchConfig '
                  - '         --configsets Esempio25balancer_install '
                  - '         --region '
                  - !Ref 'AWS::Region'
                  - |+
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files: [/etc/cfn/cfn-hup.conf, /etc/cfn/hooks.d/cfn-auto-reloader.conf]
        install_app:
          packages:
            yum:
              httpd: []
          files:
            /var/www/html/index.html:
              content: !Join ['

                  ', [ '<h1>Congratulations, you have successfully launched
                    the AWS CloudFormation sample.</h1>']]
              mode: '000644'
              owner: root
              group: root
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
        verify_instance_health:
          commands:
            ELBHealthCheck:
              command: !Join ['', ['until [ "$state" == "\"InService\"" ]; do ', '  state=$(aws
                    --region ', !Ref 'AWS::Region', ' elb describe-instance-health ',
                  '              --load-balancer-name ', !Ref 'Balancer',
                  '              --instances $(curl -s http://169.254.169.254/latest/meta-data/instance-id) ',
                  '              --query InstanceStates[0].State); ', '  sleep 10; ',
                  done]]
    Properties:
      KeyName: !Ref KeyName
      ImageId: !Ref EC2Ami
      InstanceType: !Ref InstanceType
      SecurityGroups: #!Ref InstanceSecurityGroup
        - !GetAtt InstanceSecurityGroup.GroupId
      IamInstanceProfile: !Ref WebServerInstanceProfile
      UserData: !Base64
        Fn::Join:
        - ''
        - - |
            #!/bin/bash -xe
          - |
            yum update -y aws-cfn-bootstrap
          - '/opt/aws/bin/cfn-init -v '
          - '         --stack '
          - !Ref 'AWS::StackName'
          - '         --resource LaunchConfig '
          - '         --configsets Esempio25balancer_install '
          - '         --region '
          - !Ref 'AWS::Region'
          - |+

          - '/opt/aws/bin/cfn-signal -e $? '
          - '         --stack '
          - !Ref 'AWS::StackName'
          - '         --resource WebServerGroup '
          - '         --region '
          - !Ref 'AWS::Region'
          - |+

          - 'sudo mkdir /opt/Esempio25balancer'
          - |+

#NON CANCELLARE LA RIGA VUOTA per terminare il Fn::Join:

##OLD
##  ElasticLoadBalancer:
#    Type: AWS::ElasticLoadBalancing::LoadBalancer
#    Properties:
#      Subnets: 
#        - !Ref PrivateSubnet1
#        - !Ref PrivateSubnet2
#      CrossZone: 'true'
#      Listeners:
#      - LoadBalancerPort: '80'
#        InstancePort: '80'
#        Protocol: HTTP
##      - InstancePort: '80'
##        InstanceProtocol: HTTP
##        LoadBalancerPort: '443'
##        Protocol: HTTPS
##        PolicyNames: 
##        - My-SSLNegotiation-Policy
##        SSLCertificateId: arn:aws:iam::123456789012:server-certificate/my-server-certificate
##      Policies:
##      - PolicyName: My-SSLNegotiation-Policy
##        PolicyType: SSLNegotiationPolicyType
##        Attributes:
##        - Name: Reference-Security-Policy
##          Value: ELBSecurityPolicy-TLS-1-2-2017-01
#      HealthCheck:
#        Target: HTTP:80/
#        HealthyThreshold: '3'
#        UnhealthyThreshold: '5'
#        Interval: '30'
#        Timeout: '5'
#      SecurityGroups:
#        - !GetAtt LBSecurityGroup.GroupId
#      Scheme: internet-facing

Outputs:
  WebsiteURL:
    Description: Website public URL
    #Value: !Join ['', ['http://', !GetAtt [ElasticLoadBalancer, DNSName]]]
    #see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-loadbalancer.html
    Value: !GetAtt Balancer.DNSName # !Join ["", [!GetAtt Balancer.DNSName, "/"]]