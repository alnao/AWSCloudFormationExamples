AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: API rest to manage S3

Parameters:
  SourceBucket:
    Type: String
    Default: alberto-input
  SourcePath:
    Type: String
    Default: INPUT13/file
  Stage:
    Type: String
    Default: dev
Resources:
  LambdaApiIamRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                  - 's3:ListBucket'
                  - 's3:ListObjectsV2'
                Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref SourceBucket
                  - '/*'
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                  - 's3:ListBucket'
                  - 's3:ListObjectsV2'
                Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref SourceBucket
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      OpenApiVersion: 3.0.2
      CacheClusterEnabled: false
      CacheClusterSize: '0.5'
      Cors: #https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-cors-console.html
        AllowMethods: "'POST, GET, OPTIONS'" #, OPTIONS
        AllowOrigin: "'*'" 
        AllowHeaders: "'*'"
        MaxAge: "'600'"
      MethodSettings:
        - ResourcePath: /
          HttpMethod: GET
          CachingEnabled: false
          CacheTtlInSeconds: 300
        - ResourcePath: /text
          HttpMethod: POST
          CachingEnabled: false
          CacheTtlInSeconds: 300
        - ResourcePath: /text
          HttpMethod: GET
          CachingEnabled: false
          CacheTtlInSeconds: 300
        - ResourcePath: /presigned
          HttpMethod: GET
          CachingEnabled: false
          CacheTtlInSeconds: 300
  LambdaAPIgetList: 
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt LambdaApiIamRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /
            Method: get
            RestApiId:
              Ref: ApiGateway
      Runtime: python3.8
      CodeUri: lambda
      Handler: api.entrypoint_list
      MemorySize: 525
      Timeout: 600
      Environment: 
        Variables:
          SourceBucket: !Ref SourceBucket
          SourcePath: !Ref SourcePath
  LambdaAPIgetText: 
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt LambdaApiIamRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /text
            Method: get
            RestApiId:
              Ref: ApiGateway
      Runtime: python3.8
      CodeUri: lambda
      Handler: api.entrypoint_get_txt
      MemorySize: 525
      Timeout: 600
      Environment: 
        Variables:
          SourceBucket: !Ref SourceBucket
          SourcePath: !Ref SourcePath
  LambdaAPIpostText: 
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt LambdaApiIamRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /text
            Method: post
            RestApiId:
              Ref: ApiGateway
      Runtime: python3.8
      CodeUri: lambda
      Handler: api.entrypoint_post_txt
      MemorySize: 525
      Timeout: 600
      Environment: 
        Variables:
          SourceBucket: !Ref SourceBucket
          SourcePath: !Ref SourcePath
  LambdaAPIgetPresigned: 
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt LambdaApiIamRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /presigned
            Method: get
            RestApiId:
              Ref: ApiGateway
      Runtime: python3.8
      CodeUri: lambda
      Handler: api.entrypoint_get_presigned_url
      MemorySize: 525
      Timeout: 600
      Environment: 
        Variables:
          SourceBucket: !Ref SourceBucket
          SourcePath: !Ref SourcePath

Outputs:
  StackName:
    Description: Deployed StackName for update
    Value: !Ref AWS::StackName
  Endpoint:
    Description: Endpoint URL API REST
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Stage}