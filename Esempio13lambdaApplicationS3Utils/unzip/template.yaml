AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: unzip file from S3 path to S3 path

Parameters:
  SourceBucket:
    Type: String
    Default: alberto-input
  SourcePathZip:
    Type: String
    Default: INPUT/zip
  DestBucket:
    Type: String
    Default: alberto-input
  DestPath:
    Type: String
    Default: INPUT/img
  SourceFilePattern:
    Type: String
    Default: '*.zip'
  StateTrigger:
    Type: String
    Default: ENABLED
    AllowedValues:
      - ENABLED
      - DISABLED
Resources:
  TriggerOnFilePutEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: default
      State: !Ref StateTrigger
      EventPattern: 
        source: 
          - "aws.s3"
        detail-type:
          - "Object Created"
        detail: 
          bucket:
            name: 
              - !Ref SourceBucket
          object:
            key:
              - prefix: !Ref SourcePathZip
      Targets:
        - Id: id1
          Arn: !GetAtt LambdaUnzip.Arn
  LambdaUnzipPermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !GetAtt LambdaUnzip.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt TriggerOnFilePutEventRule.Arn
  LambdaUnzip:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda
      Handler: unzip.lambda_handler
      Runtime: python3.8
      MemorySize: 1280
      Timeout: 900
      Environment: 
        Variables:
          SourceBucket: !Ref SourceBucket
          SourcePath: !Ref SourcePathZip
          SourceFilePattern: !Ref SourceFilePattern
          DestBucket: !Ref DestBucket
          DestPath: !Ref DestPath
      Role: !GetAtt LambdaUnzipIamRole.Arn
  LambdaUnzipIamRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetBucketNotification'
                  - 's3:PutBucketNotification'
                Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref SourceBucket
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref SourceBucket
                  - '/*'
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref SourceBucket
                  - '/*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
Outputs:
  StackName:
    Description: Deployed StackName for update
    Value: !Ref AWS::StackName
