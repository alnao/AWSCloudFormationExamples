AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: template esegue una lambda esterna in un file dentro la cartella lambda
# eventualmente si pu√≤ modificare la lambda interna per fare cose diverse, per ora mostra solo un dump dell'event

Parameters:
  SourceBucket1:
    Type: String
    Description: Source Bucket 1
    Default: alberto-input
#  SourceBucket2:
#    Type: String
#    Description: Source Bucket 2
#    Default: alberto-input2
#  TargetBucket:
#    Type: String
#    Description: Bucket destinazione
#    Default: bucket-invio
  SourcePath:
    Type: String
    Description: Source Path
    Default: INPUT

Resources:
  ExternalPyLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda
      Handler: s3_file_concat.entrypoint
      Runtime: python3.8
      MemorySize: 512
      Timeout: 900
      Environment: 
        Variables:
          SOURCE_BUCKET_1: !Ref SourceBucket1
#          SOURCE_BUCKET_2: !Ref SourceBucket2
#          TARGET_BUCKET: !Ref TargetBucket
      Policies:
        - Statement:
          - Sid: AllowS3BucketReadWriteAccess
            Effect: Allow
            Action: "s3:*"
            Resource: "*"

  TriggerExternalPy:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: default
      EventPattern: 
        source: 
          - "aws.s3"
        detail-type:
          - "Object Created"
        detail: 
          bucket:
            name: 
              - !Ref SourceBucket1
          object:
            key:
              - prefix: !Ref SourcePath
      Targets:
        - Id: id1
          Arn: !GetAtt ExternalPyLambda.Arn

  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref ExternalPyLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt TriggerExternalPy.Arn


  StartLambdaNewFileRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetBucketNotification'
                  - 's3:PutBucketNotification'
                Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref SourceBucket1
                  - '/*'
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref SourceBucket1
                  - '/*'
#              - Effect: Allow
#                Action:
#                  - 's3:PutObjectAcl'
#                  - 's3:PutObject'
#                Resource: !Join
#                - ''
#                - - 'arn:aws:s3:::'
#                  - !Ref TargetBucket
#                  - '/*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'

Outputs:
  StackName:
    Description: Deployed StackName for update
    Value: !Ref AWS::StackName
  ExternalPyArn:
    Description: File Merger Function ARN
    Value: !GetAtt ExternalPyLambda.Arn