AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Esempio di template CloudFormation con tabella Dynamo e CRUD sviluppato con Lambda Function ed esposto con API Manager (AWS::Serverless::Api)
# copia del Esempio11dynamoApiCrud con in aggiunta la Lambda Authorizer di API Gateway
# nota: nel template c'è anche un Bucket S3 e un trigger che carica dati sulla tabella Dynamo
# nota: nel template al Api Gatewat c'è un Lambda Authorizer che valida un token JWT, la password è in chiaro, NON è buona norma!

# see
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-api.html
# https://www.fernandomc.com/posts/ten-examples-of-getting-data-from-dynamodb-with-python-and-boto3/
# https://itnext.io/setting-up-api-gateway-with-dynamodb-using-cloudformation-a8ab3e70f494
# https://dynobase.dev/dynamodb-python-with-boto3/
#  dynamodb = boto3.resource('dynamodb', region_name=region)
#  tables = list(dynamodb.tables.all())
# BOTO3:documnetation
# https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/dynamodb.html#DynamoDB.Client.delete_item

# Lambda authorizer:
#see https://aws.amazon.com/it/blogs/compute/announcing-nested-applications-for-aws-sam-and-the-aws-serverless-application-repository/
#see https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-api-apiauth.html

Parameters:
  State:
    Type: String
    Default: ENABLED
    AllowedValues:
      - ENABLED
      - DISABLED
  BucketName:
    Type: String
    Description: Nome del bucket
    Default: alberto-input-es12
  DynamoName:
    Type: String
    Description: Nome del DB dynamo
    Default: dynamo-es12
  FilePattern:
    Type: String
    Default: INPUT
  Stage:
    Type: String
    Default: dev
  JwtKey:
    Type: String
    Description: Jwt Key
    Default: Password.1234
    #NOTA: la password in chiaro non è buona norma, TODO: salvare il parametro cryptato!

Resources:
  Dynamo:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref DynamoName
      AttributeDefinitions:
        - 
          AttributeName: "id"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "id"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"

  Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      BucketName: !Ref BucketName
      MetricsConfigurations:
        - Id: EntireBucket
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
#    DeletionPolicy: Retain

  NotificationLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda
      Handler: csv_to_dynamo.entrypoint
      Runtime: python3.8
      MemorySize: 128
      Environment: 
        Variables:
          DynamoName: !Ref DynamoName
      Role: !GetAtt LambdaIAMRole.Arn
      Timeout: 500

  TriggerExternalPy:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: default
      EventPattern: 
        source: 
          - "aws.s3"
        detail-type:
          - "Object Created"
        detail: 
          bucket:
            name: 
              - !Ref BucketName
          object:
            key:
              - prefix: !Ref FilePattern
      Targets:
        - Id: id1
          Arn: !GetAtt NotificationLambda.Arn
  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref NotificationLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt TriggerExternalPy.Arn

  LambdaIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetBucketNotification'
                  - 's3:PutBucketNotification'
                Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref BucketName
              - Effect: Allow
                Action:
                  - 'dynamodb:BatchWriteItem'
                Resource: !GetAtt Dynamo.Arn
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref BucketName
                  - '/*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'

  APIRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: APIPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                - "dynamodb:PutItem"
                - "dynamodb:UpdateItem"
                - "dynamodb:DeleteItem"
                - "dynamodb:GetItem"
                - "dynamodb:Scan"
                Resource: !GetAtt Dynamo.Arn
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'

  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      OpenApiVersion: 3.0.2
      CacheClusterEnabled: false
      CacheClusterSize: '0.5'
      Cors: #https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-cors-console.html
        AllowMethods: "'POST, GET, DELETE'" #, OPTIONS
        AllowOrigin: "'*'" 
        AllowHeaders: "'*'"
        MaxAge: "'600'"
      MethodSettings:
        - ResourcePath: /
          HttpMethod: GET
          CachingEnabled: false
          CacheTtlInSeconds: 300
        - ResourcePath: /
          HttpMethod: POST
          CachingEnabled: false
          CacheTtlInSeconds: 300
        - ResourcePath: /
          HttpMethod: DELETE
          CachingEnabled: false
          CacheTtlInSeconds: 300
#see https://aws.amazon.com/it/blogs/compute/announcing-nested-applications-for-aws-sam-and-the-aws-serverless-application-repository/
#see https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-api-apiauth.html
      Auth:
        DefaultAuthorizer: MyLambdaRequestAuthorizer
        AddApiKeyRequiredToCorsPreflight : false
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          MyLambdaRequestAuthorizer:
            FunctionPayloadType: REQUEST
            FunctionArn: !GetAtt LambdaAuthorizer.Arn
            Identity:
              Headers:
                - Authorization

  ApiGetFunction: # Adds a GET api endpoint at "/" to the ApiGateway via an Api event
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt APIRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /
            Method: get
            RestApiId:
              Ref: ApiGateway
      CodeUri: lambda
      Handler: dynamo_crud.get_handler
      Runtime: python3.8
      MemorySize: 128
      Environment: 
        Variables:
          DynamoName: !Ref DynamoName
      Timeout: 500

  ApiPostFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt APIRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /
            Method: post
            RestApiId:
              Ref: ApiGateway
      CodeUri: lambda
      Handler: dynamo_crud.post_handler
      Runtime: python3.8
      MemorySize: 128
      Environment: 
        Variables:
          DynamoName: !Ref DynamoName
      Timeout: 500

  ApiDeleteFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt APIRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /
            Method: delete
            RestApiId:
              Ref: ApiGateway
      CodeUri: lambda
      Handler: dynamo_crud.delete_handler
      Runtime: python3.8
      MemorySize: 128
      Environment: 
        Variables:
          DynamoName: !Ref DynamoName
      Timeout: 500

# componenti del LambdaAuthorizer
  LambdaAuthorizer: 
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.8
      Role: !GetAtt LambdaAuthorizerIAMRole.Arn
      CodeUri: lambda
      Handler: authJwt.entrypoint
      Runtime: python3.8
      MemorySize: 512
      Timeout: 900
      Environment: 
        Variables:
          JwtKey: !Ref JwtKey
      Description: LambdaAuthorizer
  LambdaAuthorizerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaAuthorizer
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*
  LambdaAuthorizerIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'

Outputs:
  StackName:
    Description: Deployed StackName for update
    Value: !Ref AWS::StackName
  APIEndPoint:
    Description: Endpoint URL API REST
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Stage}
