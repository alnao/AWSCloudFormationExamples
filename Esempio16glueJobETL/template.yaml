AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Esporta documenti da EPC verso BOX

Parameters:
  SFName:
    Type: String
    Default: sfEsempio16glueJobETL
  Bucket:
    Type: String
    Description: Bucket di appoggio per l'import
    Default: alberto-input
  FilePattern:
    Type: String
    Description: Pattern di partenza di excel
    Default: '*.xlsx'
  CsvFilePattern:
    Type: String
    Description: Pattern del file csv
    Default: lista.csv
  SourcePath:
    Type: String
    Default: INPUT/excel
  DestCsvPath:
    Type: String
    Default: INPUT/listaPratiche
  DestPath:
    Type: String
    Default: OUTPUT/esiti
  StateTrigger:
    Type: String
    Default: ENABLED
    AllowedValues:
      - ENABLED
      - DISABLED
  CodePosition:
    Type: String
    Default: CODE/glue
Resources:
  GlueProcess: #see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_Glue.html
    Type: AWS::Glue::Job #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-glue-job.html
    Properties:
      Name: esempio16-glue-job-etl
      GlueVersion: "3.0" # pythonshell=1.0, glueetl=0.9 default
      ExecutionProperty:
        MaxConcurrentRuns: 20
      MaxRetries: 0
      # MaxCapacity: 1 #Max Capacity should be between 0.0 and 1.0 if present for pythonshell,
      AllocatedCapacity: 2 # only glueetl, defaul 10 with , 2 to 100
      #NotificationProperty:
      #  NotifyDelayAfter: 2 #see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-glue-job-notificationproperty.html
      DefaultArguments:
        "--enable-continuous-cloudwatch-log": true
        "--enable-continuous-log-filter": true
        "--additional-python-modules": "boxsdk pyspark"
        "--BUCKET": !Ref Bucket
        "--SOURCE_PATH": !Ref DestCsvPath
        "--SOURCE_FILE": !Ref CsvFilePattern
        "--DEST_PATH": !Ref DestPath
        "--numero_righe": '0'
        "--file_name": ''
      Command: #https://github.com/aws-samples/aws-etl-orchestrator/blob/master/cloudformation/glue-resources.yaml
        # Name: pythonshell #nota: se pythonshell massimo MaxCapacity:1
        # PythonVersion: "3.9"
        Name: glueetl #nota se glueetl, MaxCapacity 2-100, defaul 10 
        ScriptLocation: !Sub "s3://${Bucket}/${CodePosition}/etl_code.py"
      Role: !GetAtt GlueExecutionRole.Arn
  GlueExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
                Service:
                    - "glue.amazonaws.com"
            Action:
                - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: ReadWriteS3Policy
          PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - 's3:*'
                  Resource: !Sub "arn:aws:s3:::${Bucket}/*"
                - Effect: Allow
                  Action:
                    - 's3:*'
                  Resource: !Sub "arn:aws:s3:::${Bucket}"
        - PolicyName: "AccessLogging"
          PolicyDocument:
              Version: "2012-10-17"
              Statement:
                  - Effect: "Allow"
                    Action:
                        - "logs:CreateLogStream"
                        - "logs:CreateLogGroup"
                        - "logs:PutLogEvents"
                    Resource:
                        - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws-glue/*"
  EventRule: 
    Type: AWS::Events::Rule
    Properties:
      EventBusName: default
      State: !Ref StateTrigger
      EventPattern: 
        source: 
          - "aws.s3"
        detail-type:
          - "Object Created"
        detail: 
          bucket:
            name: 
              - !Ref Bucket
          object:
            key:
              - prefix: !Ref SourcePath
      Targets:
        - Id: id1
          Arn: !GetAtt StartProcessLambda.Arn
  EventRulePermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName:  !GetAtt StartProcessLambda.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventRule.Arn
  StartProcessLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda
      Handler: startProcess.entrypoint
      Runtime: "python3.10"
      MemorySize: 512
      Timeout: 300
      Environment: 
        Variables:
          FILE_PATTERN_MATCH: !Ref FilePattern
          STATE_MACHINE_ARN: !GetAtt StepFunction.Arn
      Role: !GetAtt StartProcessLambdaIamRole.Arn
      Policies:
        - Statement:
          - Sid: AllowAccessToStepFunction
            Effect: Allow
            Action: "states:*"
            Resource: !GetAtt StepFunction.Arn
        - StepFunctionsExecutionPolicy:
          StateMachineName: !Ref StepFunction
  StartProcessLambdaIamRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref Bucket
                  - '/*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action: 
                  - 'states:StartExecution'
                Resource: !GetAtt StepFunction.Arn

  StepFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: "buckets-and-logs"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogDelivery'
                  - 'logs:GetLogDelivery'
                  - 'logs:UpdateLogDelivery'
                  - 'logs:DeleteLogDelivery'
                  - 'logs:ListLogDeliveries'
                  - 'logs:PutResourcePolicy'
                  - 'logs:DescribeResourcePolicies'
                  - 'logs:DescribeLogGroups'
                  - 'cloudwatch:PutMetricData'
                Resource: '*'
              - Effect: Allow
                Action: 'lambda:InvokeFunction'
                Resource: !GetAtt Excel2csvLambda.Arn
              - Effect: Allow
                Action: 
                  - 'glue:StartJobRun'
                  - "glue:GetJobRun"
                  - "glue:BatchStopJobRun"
                  - "glue:GetJobRuns"
                Resource: !Sub "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:job/${GlueProcess}"
  StepFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 3
      LogGroupName: !Sub /aws/vendedlogs/states/${SFName}-statemachine-logs
  StepFunction:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Ref SFName
      Type: STANDARD
      DefinitionUri: state-machine.yaml
      Role: !GetAtt StepFunctionRole.Arn
      DefinitionSubstitutions:
        Excel2csvLambdaArn: !GetAtt Excel2csvLambda.Arn
        GlueProcess: !Sub "${GlueProcess}"
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt StepFunctionLogGroup.Arn
        Level: ALL
        IncludeExecutionData: True
  LambdaIamRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                  - 's3:*'
                Resource: !Sub "arn:aws:s3:::${Bucket}/*"
#              - Effect: Allow
#                Action:
#                  - 's3:GetObject'
#                Resource: !Sub "arn:aws:s3:::${Bucket}/"
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action: 'glue:*'
                Resource: "*"

  Excel2csvLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda
      Handler: excel2csv.lambda_handler
      Runtime: "python3.10"
      MemorySize: 1280
      Timeout: 900
      Environment: 
        Variables:
          SourceBucket: !Ref Bucket
          SourcePath: !Ref SourcePath
          SourceFilePattern: !Ref FilePattern
          DestBucket: !Ref Bucket
          DestPath: !Ref DestCsvPath
          DestFileName: !Ref CsvFilePattern
      Role: !GetAtt LambdaIamRole.Arn

Outputs:
  StackName:
    Description: Deployed StackName for update
    Value: !Ref AWS::StackName
...
