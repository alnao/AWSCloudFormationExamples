AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Es27uploadBinaryFileS3 - upload binary file from WebPage into S3

Parameters:
  Stage:
    Type: String
    Default: dev
  BucketName:
    Type: String
    Description: Source Bucket name
    Default: es27-uploader-bucket
  DomainTableName:
    Type: String
    Default: es27-uploader-domain
  LogTableName:
    Type: String
    Description: Nome della tabella dynamo di log
    Default: es27-uploader-log
  JwtKey:
    Type: String
    Default: AlbertoNaoBellissimo.123
Resources:
  #bucket
  Es27Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref BucketName
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter
      VersioningConfiguration:
        Status: Enabled
  #dynamo domain
  Es27DynamoDomain:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref DomainTableName
      AttributeDefinitions:
        - 
          AttributeName: "id"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "id"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
  #dynamo log
  Es27LogUpload:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref LogTableName
      AttributeDefinitions:
        - 
          AttributeName: "id"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "id"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
  #lambda permission role
  Es27APIRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: APIPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                - "dynamodb:GetItem"
                - "dynamodb:Scan"
                Resource: !GetAtt Es27DynamoDomain.Arn
              - Effect: Allow
                Action:
                - "dynamodb:PutItem"
                - "dynamodb:UpdateItem"
                - "dynamodb:DeleteItem"
                - "dynamodb:GetItem"
                - "dynamodb:Scan"
                Resource: !GetAtt Es27LogUpload.Arn
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:ListBucket'
                  - 's3:PutObject'
                Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref BucketName
                  - '/*'
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:ListBucket'
                  - 's3:PutObject'
                Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref BucketName
              - Effect: Allow
                Action:
                  - 'sns:Publish'
                Resource: !Ref Es27GenericSnsTopic

  #api gateway
  Es27APIGateway:
    Type: AWS::Serverless::Api #https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-api.html
    Properties:
      BinaryMediaTypes:
        - '*/*' # https://github.com/ParthTrambadiya/file-upload-sam/blob/master/template.yaml
      StageName: !Ref Stage
      OpenApiVersion: 3.0.2
      CacheClusterEnabled: false
      CacheClusterSize: '0.5'
      Cors:
        AllowMethods: "'POST, GET'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
        MaxAge: "'600'"
      MethodSettings:
        - ResourcePath: /
          HttpMethod: GET
          CachingEnabled: false
          CacheTtlInSeconds: 300
        - ResourcePath: /
          HttpMethod: POST
          CachingEnabled: false
          CacheTtlInSeconds: 300
        - ResourcePath: / #https://stackoverflow.com/questions/59568148/enabling-binary-media-types-breaks-option-post-call-cors-in-aws-lambda
          HttpMethod: OPTIONS
          CachingEnabled: false
          CacheTtlInSeconds: 300
      Auth:
        DefaultAuthorizer: MyLambdaRequestAuthorizer
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          MyLambdaRequestAuthorizer:
            FunctionPayloadType: REQUEST
            FunctionArn: !GetAtt Es27lambdaAuthorizer.Arn
            Identity:
              Headers:
                - Authorization
#        ResourcePolicy:
#          IpRangeWhitelist: #see https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-function-resourcepolicystatement.html
#            - "XX.XX.XX.XX" 
  Es27GatewayResponseDefault4XX:
    Type: 'AWS::ApiGateway::GatewayResponse'
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
      ResponseType: DEFAULT_4XX
      RestApiId:
        Ref: Es27APIGateway
  Es27GatewayResponseDefault5XX:
    Type: 'AWS::ApiGateway::GatewayResponse'
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
      ResponseType: DEFAULT_5XX
      RestApiId:
        Ref: Es27APIGateway

  #lambda function API
  Es27GetFunction: 
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt Es27APIRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /
            Method: get
            RestApiId:
              Ref: Es27APIGateway
      Runtime: python3.8
      CodeUri: lambda
      Handler: list.handler
      MemorySize: 525
      Timeout: 600
      Environment: 
        Variables:
          DynamoName: !Ref LogTableName
  Es27OptionsFunction: 
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt Es27APIRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /
            Method: options
            RestApiId:
              Ref: Es27APIGateway
      Runtime: python3.8
      CodeUri: lambda
      Handler: list.handlerOptions
      MemorySize: 525
      Timeout: 600
      Environment: 
        Variables:
          DynamoName: !Ref LogTableName
  Es27PostFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt Es27APIRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /
            Method: post
            RestApiId:
              Ref: Es27APIGateway
      Runtime: python3.8
      CodeUri: lambda
      Handler: uploader.handler
      MemorySize: 525
      Timeout: 600
      Environment: 
        Variables:
          BucketName: !Ref BucketName
          DomainTableName: !Ref DomainTableName
          LogTableName: !Ref LogTableName
          GenericSnsTopicArn: !Ref Es27GenericSnsTopic

  Es27lambdaAuthorizerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref Es27lambdaAuthorizer
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Es27APIGateway}/*/*
  Es27lambdaAuthorizer: 
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.8
      Role: !GetAtt Es27APIRole.Arn
      CodeUri: lambda
      Handler: authJwt.entrypoint
      MemorySize: 512
      Timeout: 900
      Environment: 
        Variables:
          JwtKey: !Ref JwtKey
      Description: Es27lambdaAuthorizer

  #SNS topic
  Es27GenericSnsTopic:  #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sns-topic.html
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: es27uploadGenericSns
      TopicName: es27uploadGenericSns

Outputs:
  StackName:
    Description: Deployed StackName for update
    Value: !Ref AWS::StackName
  UrlGet:
    Description: Endpoint URL API REST
    Value: !Sub https://${Es27APIGateway}.execute-api.${AWS::Region}.amazonaws.com/${Stage}
