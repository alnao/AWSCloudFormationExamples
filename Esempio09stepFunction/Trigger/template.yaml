AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Trigger EventBridge che da un evento S3 esegue una step function

Parameters:
  SourceBucket:
    Type: String
    Default: alberto-input
  SourcePath:
    Type: String
    Default: AAAAAAAAAAAAAAAAAAAA/
  SourceFilePattern:
    Type: String
    Default: prova.csv
  StateMachineArn:
    Type: String
    Default: 'arn:aws:states:eu-west-1:740456629644:stateMachine:AlbertoStepFunction'
  StateMachineName:
    Type: String
    Default: 'StepFunction'
  State:
    Type: String
    Default: ENABLED
    AllowedValues:
      - ENABLED
      - DISABLED

Resources:


  TriggerOnFilePutEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: default
      State: !Ref State
      EventPattern: 
        source: 
          - "aws.s3"
        detail-type:
          - "Object Created"
        detail: 
          bucket:
            name: 
              - !Ref SourceBucket
          object:
            key:
              - prefix: !Ref SourcePath
      Targets:
        - Id: id1
          Arn: !GetAtt Lambda.Arn

  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !GetAtt Lambda.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt TriggerOnFilePutEventRule.Arn
#      SourceArn: !Join
#      - ''
#      - - 'arn:aws:s3:::'
#        - !Ref SourceBucket

  Lambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda
      Handler: start_sm_on_new_s3_key.entrypoint
      Runtime: python3.8
      MemorySize: 128
      Environment: 
        Variables:
          STATE_MACHINE_ARN: !Ref StateMachineArn
          FILE_PATTERN_MATCH: !Ref SourceFilePattern
      Role: !GetAtt LambdaIamRole.Arn
      Policies:
        - Statement:
          - Sid: AllowAccessToStepFunction
            Effect: Allow
            Action: "states:*"
            Resource: !Ref StateMachineArn
        - StepFunctionsExecutionPolicy:
          StateMachineName: !Ref StateMachineName

  LambdaIamRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetBucketNotification'
                  - 's3:PutBucketNotification'
                Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref SourceBucket
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref SourceBucket
                  - '/*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action: 
                  - 'states:StartExecution'
                Resource: !Ref StateMachineArn

Outputs:
  StackName:
    Description: Deployed StackName for update
    Value: !Ref AWS::StackName
...

