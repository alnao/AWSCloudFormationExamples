AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Template CloudFormation - template che segue i passi: 
  - filtro per pattern
  - copia staging in
  - cancella originale
  - copia staging out 
  - invio a bucket applicativo
  
# Promemoria:
# Nel bucket sorgente deve essere attivata (manualmente) la proprietà EventBridgeConfiguration: EventBridgeEnabled: true
# Nel bucket destinazione bisogna assegnare la regola IAM della step function al bucket 
#{
#    "Version": "2012-10-17",
#    "Statement": [{
#            "Sid": "Statement1",
#            "Effect": "Allow",
#            "Principal": {
#                "AWS": [
#                    "arn:aws:iam::740456629644:role/esempio09complete-Esempio-Esempio09StateMachineRol-109W2XYMJ9JIN",
#                ]
#            },
#            "Action": "s3:*",
#            "Resource": [
#                "arn:aws:s3:::nome-bucket",
#                "arn:aws:s3:::nome-bucket/*"
#            ]
#        }
#    ]
#}


# modello caricato via SAM con il comando 
# $ sam validate
# $ sam build
# $ sam package --output-template-file packagedV1.yaml --s3-prefix REPOSITORY --s3-bucket alberto-input
# $ sam deploy --template-file .\packagedV1.yaml --stack-name esempio09complete --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND
# opzionali: $ sam deploy --template-file .\packagedV1.yaml --stack-name esempio09complete --capabilities CAPABILITY_IAM --parameter-overrides DestBucket=input-alberto2
# nota: --capabilities CAPABILITY_IAM è obbligatorio per le regole IAM
# per provare caricamento con comando 
# $ aws s3 cp ../../Esempio04s3NotificaLamba/prova.csv s3://sftp-simulator/input01/FILE_INPUT-1234.csv
# $ aws s3 ls s3://sftp-simulator/input01/
# $ aws s3 ls s3://application-bucket/folder/
# $ sam logs --stack-name esempio09complete
# $ sam delete --stack-name esempio09complete

Parameters:
  SourceFilePattern:
    Type: String
    Description: Source Path solo il nome del file
    Default: FILE_INPUT
  SourceBucket:
    Type: String
    Description: Source Bucket
    Default: sftp-simulator
  SourcePath:
    Type: String
    Description: Source Path senza barre iniziali e finali
    Default: input01
  StagingBucket:
    Type: String
    Description: Bucket destinazione
    Default: staging
  StagingFilePathIN:
    Type: String
    Description: Source Path solo il nome del file
    Default: ftp/INCOMING
  StagingFilePathOUT:
    Type: String
    Description: Source Path senza barre iniziali e finali
    Default: application/OUTGOING
  DestBucket:
    Type: String
    Description: Bucket destinazione
    Default: application-bucket
  DestFileName:
    Type: String
    Description: Source Path solo il nome del file
    Default: FILE_DESTINATION.txt
  DestPath:
    Type: String
    Description: Source Path senza barre iniziali e finali
    Default: folder

Resources:
  # TRIGGER ON S3 folder --> lambda --> application
  Esempio09Trigger:
    Type: AWS::Serverless::Application
    Properties:
      Location: ../Trigger/trigger.yaml
      Parameters:
        SourceBucket: !Ref SourceBucket
        SourcePath: !Ref SourcePath
        StateMachineArn: !GetAtt Esempio09Application.Outputs.StateMachineArn
        StateMachineName: !GetAtt Esempio09Application.Outputs.StateMachineName
        SourceFilePattern: !Ref SourceFilePattern
  # application --> step function
  Esempio09Application:
    Type: AWS::Serverless::Application
    Properties:
      Location: ../StateMachine/application.yaml
      Parameters:
        SFName: Esempio09StateMachine
        SourcePath: !Ref SourcePath
        SourceBucket: !Ref SourceBucket
        StagingBucket: !Ref StagingBucket
        StagingFilePathIN: !Ref StagingFilePathIN
        StagingFilePathOUT: !Ref StagingFilePathOUT
        DestBucket: !Ref DestBucket
        DestPath: !Ref DestPath
        DestFileName: !Ref DestFileName

Outputs:
  StackName:
    Description: Deployed StackName for update
    Value: !Ref AWS::StackName
...