AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Step function che esegue la copia di un file e poi lancia una lambda function

Parameters:
  SFName:
    Type: String
    Default: 'smEsempio08'
#  DestFileName:
#    Type: String
#    Default: provaDest.csv
  SourceBucket: 
    Type: String
    Default: alberto-input
  SourcePath:
    Type: String
    Default: INPUT
  DestBucket:
    Type: String
    Default: alberto-input2
  DestFileName:
    Type: String
    Default: provaDest.csv
  DestFilePath:
    Type: String
    Default: OUTPUT
  ProcessArn:
    Type: String
    Default: xxxxxxxxxxxxxx

Resources:
  StateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: "buckets-and-logs"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogDelivery'
                  - 'logs:GetLogDelivery'
                  - 'logs:UpdateLogDelivery'
                  - 'logs:DeleteLogDelivery'
                  - 'logs:ListLogDeliveries'
                  - 'logs:PutResourcePolicy'
                  - 'logs:DescribeResourcePolicies'
                  - 'logs:DescribeLogGroups'
                  - 'cloudwatch:PutMetricData'
                Resource: '*'
              - Effect: Allow
                Action: 'lambda:InvokeFunction'
                Resource: !Ref ProcessArn
              - Effect: Allow
                Action: "s3:*"
                Resource: !Sub "arn:aws:s3:::${SourceBucket}/*"
              - Effect: Allow
                Action: "s3:*"
                Resource: !Sub "arn:aws:s3:::${SourceBucket}/"
              - Effect: Allow
                Action: "s3:*"
                Resource: !Sub "arn:aws:s3:::${DestBucket}/*"
              - Effect: Allow
                Action: "s3:*"
                Resource: !Sub "arn:aws:s3:::${DestBucket}/"
               
  StateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 3
      LogGroupName: !Sub /aws/vendedlogs/states/${SFName}-statemachine-logs
        
  StateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Ref SFName
      Type: STANDARD
      DefinitionUri: statemachine.yaml
      Role: !GetAtt StateMachineRole.Arn
      DefinitionSubstitutions:
        DestFileName: !Ref DestFileName
        ProcessArn: !Ref ProcessArn
        SourcePath: !Ref SourcePath
        SourceBucket: !Ref SourceBucket
        DestBucket: !Ref DestBucket
        DestFilePath: !Ref DestFilePath
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt StateMachineLogGroup.Arn
        Level: ALL
        IncludeExecutionData: True


Outputs:
  StackName:
    Description: Deployed StackName for update
    Value: !Ref AWS::StackName
  StateMachineArn:
    Description: ARN of the created State Machine
    Value: !Ref StateMachine
  StateMachineName:
    Description: ARN of the created State Machine
    Value: !GetAtt StateMachine.Name
    

# $ sam validate
# $ sam build
# $ sam package --output-template-file packagedV1SM.yaml --s3-prefix REPOSITORY --s3-bucket alberto-input
# $ sam deploy --template-file .\packagedV1SM.yaml --stack-name esempio08statemachine --capabilities CAPABILITY_IAM 
# nota: --capabilities CAPABILITY_IAM Ã¨ obbligatorio per le regole IAM
# --parameter-overrides SourceBucket= SourcePath= DestFileName= DestFilePath=OUTPUT DestBucket=alberto-input2 SFName=Esempio08SF
# per provare caricamento con comando 
# $ sam logs --stack-name esempio08statemachine
# $ sam delete --stack-name esempio08statemachine
