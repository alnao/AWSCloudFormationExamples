AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Template CloudFormation - Esempio13lambdaApiS3manager - API Upload File In S3

Parameters:
  Bucket:
    Type: String
    Description: Bucket
    Default: alberto-input
  StageName:
    Type: String
    Default: dev
Resources:
  Esempio13lambdaApiS3managerApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref StageName
      OpenApiVersion: 3.0.2
      CacheClusterEnabled: false
      CacheClusterSize: '0.5'
      Cors:
        AllowMethods: "'POST'" #"'POST, GET'"
        AllowOrigin: "'*'"
        MaxAge: "'600'"
      MethodSettings:
        - ResourcePath: /
          HttpMethod: GET
          CachingEnabled: false
          CacheTtlInSeconds: 300
        - ResourcePath: /
          HttpMethod: POST
          CachingEnabled: false
          CacheTtlInSeconds: 300
        - ResourcePath: /file
          HttpMethod: POST
          CachingEnabled: false
          CacheTtlInSeconds: 300
# OLD VERSION WITH HttpApi
#  Esempio13lambdaApiS3managerHttpApi:
#    Type: AWS::Serverless::HttpApi
#    Properties:
#      StageName: !Ref StageName
#      RouteSettings:
#        "POST /apiuploadfile":
#          ThrottlingBurstLimit: 500 # overridden in HttpApi Event

  Esempio13lambdaApiS3uploadHttpApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda
      Handler: apiuploadfile.entrypoint
      Runtime: python3.8
      Environment: 
        Variables:
          Bucket: !Ref Bucket
      Events:
        ApiEventPost:
          Type: Api
          Properties:
            Path: /
            Method: POST
            RestApiId:
              Ref: Esempio13lambdaApiS3managerApiGateway
# OLD VERSION WITH HttpApi
#        ExplicitApi: # warning: creates a public endpoint
#          Type: HttpApi
#          Properties:
#            ApiId: !Ref Esempio13lambdaApiS3managerHttpApi
#            Method: POST
#            Path: /apiuploadfile
#            TimeoutInMillis: 15000
#            PayloadFormatVersion: "2.0"
      Role: !GetAtt Esempio13lambdaApiS3managerIamRole.Arn

  Esempio13lambdaApiS3listHttpApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda
      Handler: apilistfile.entrypoint
      Runtime: python3.8
      Environment: 
        Variables:
          Bucket: !Ref Bucket
      Events:
        ApiEventPost:
          Type: Api
          Properties:
            Path: /
            Method: GET
            RestApiId:
              Ref: Esempio13lambdaApiS3managerApiGateway
      Role: !GetAtt Esempio13lambdaApiS3managerIamRole.Arn
      Timeout: 600

  Esempio13lambdaApiS3getfileHttpApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda
      Handler: apigetfile.entrypoint
      Runtime: python3.8
      Environment: 
        Variables:
          Bucket: !Ref Bucket
      Events:
        ApiEventPost:
          Type: Api
          Properties:
            Path: /file
            Method: GET
            RestApiId:
              Ref: Esempio13lambdaApiS3managerApiGateway
      Role: !GetAtt Esempio13lambdaApiS3managerIamRole.Arn
      Timeout: 600

  Esempio13lambdaApiS3managerIamRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref Bucket
                  - '/*'
              - Effect: Allow
                Action:
                  - 's3:ListBucket'
                  - 's3:ListObjectsV2' #https://aws.amazon.com/it/premiumsupport/knowledge-center/s3-access-denied-listobjects-sync/
                Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref Bucket
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
Outputs:
  StackName:
    Description: Deployed StackName for update
    Value: !Ref AWS::StackName
  HttpApiUrl:
    Description: URL of your API endpoint
    Value: !Sub https://${Esempio13lambdaApiS3managerApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${StageName}
    # OLD VERSION WITH HttpApi
    #Value:
    #  Fn::Sub: 'https://${Esempio13lambdaApiS3managerApiGateway}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${StageName}/apiuploadfile'
...
