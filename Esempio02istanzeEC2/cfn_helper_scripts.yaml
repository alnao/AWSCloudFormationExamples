AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation Examples by AlNao - 02 Istanze EC2 with metadata
# see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-helper-scripts-reference.html
# specific template for ec2 with user-data and cfn-helper-scripts
# e il comando cfn-signal per la conferma a CloudFormation che l'istanza Ã¨ correttamente avviata.

Parameters:
  SubnetId:
    Description: 'Please choose a Subnet Id'
    Type: AWS::EC2::Subnet::Id
    ConstraintDescription: must be the id of an existing Subnet.
  VpcId:
    Description: Id of Vpc
    Type: AWS::EC2::VPC::Id
    ConstraintDescription: must be the id of an existing VPC
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [t2.nano, t2.micro, t2.small, t2.medium, t2.large, t2.xlarge, t2.2xlarge] 
#      ,t3.nano, t3.micro, t3.small, t3.medium, t3.large, t3.xlarge, t3.2xlarge,
#      m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge, m4.10xlarge,
#      m5.large, m5.xlarge, m5.2xlarge, m5.4xlarge,
#      c5.large, c5.xlarge, c5.2xlarge, c5.4xlarge, c5.9xlarge,
#      g3.8xlarge,
#      r5.large, r5.xlarge, r5.2xlarge, r5.4xlarge, r3.12xlarge,
#      i3.xlarge, i3.2xlarge, i3.4xlarge, i3.8xlarge,
#      d2.xlarge, d2.2xlarge, d2.4xlarge, d2.8xlarge]
    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  LatestAmiId:
    Type:  'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Web Server Security Group

Resources:
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref 'InstanceType'
      KeyName: !Ref 'KeyName'
      ImageId: !Ref 'LatestAmiId'
      Tags:
        - Key: "Name"
          Value: !Ref AWS::StackName
      NetworkInterfaces: 
      - GroupSet: [!Ref 'InstanceSecurityGroup']
        SubnetId: !Ref SubnetId
        AssociatePublicIpAddress: true
        DeviceIndex: '0'
        DeleteOnTermination: true
      UserData: 
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            # test command
            echo "TEST VpcId=${VpcId} SubnetId=${SubnetId} stack=${AWS::StackName} region=${AWS::Region}" > /tmp/test.txt
            # install aws-cfn-bootstrap
            sudo yum update -y aws-cfn-bootstrap
            #EC2Instance must be name of resource
            sudo /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}
            INIT_STATUS=$?
            # send result back using cfn-signal
            sudo /opt/aws/bin/cfn-signal -e $INIT_STATUS --stack ${AWS::StackName} --resource SampleWaitCondition --region ${AWS::Region}
            # exit the script
            exit $INIT_STATUS            
          # Alla fine del sub non serve una riga vuota ma meglio mettere un commento!
    Metadata:
      Comment: Install a simple Apache HTTP page
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              httpd: []
          sources: #come esempio di sources poi non usato in questo template
            /var/www/html/wp: 'http://wordpress.org/latest.tar.gz'
          files:
            "/var/www/html/index.html":
              content: |
                <h1>Hello World from EC2 instance!</h1>
                <p>This was created using cfn-init</p>
              mode: '000644'
          commands:
            01_echo:
              command: "echo 'commando1 ok' > comando1.html "
              cwd: /var/www/html/
            02_echo:
              command: "echo 'commando2 ok' > /var/www/html/comando2.html"
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'

  SampleWaitCondition:
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
        Count: 1
    Type: AWS::CloudFormation::WaitCondition

Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref 'EC2Instance'
  AZ:
    Description: Availability Zone of the newly created EC2 instance
    Value: !GetAtt [EC2Instance, AvailabilityZone]
  PublicDNS:
    Description: Public DNSName of the newly created EC2 instance
    Value: !GetAtt [EC2Instance, PublicDnsName]
  PublicIP:
    Description: Public IP address of the newly created EC2 instance
    Value: !GetAtt [EC2Instance, PublicIp]
  StackName:
    Description: Deployed StackName for update
    Value: !Ref AWS::StackName