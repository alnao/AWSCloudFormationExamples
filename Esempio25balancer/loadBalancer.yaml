AWSTemplateFormatVersion: 2010-09-09
Description: Installs and deploys WordPress on to Amazon EC2 instances in an Auto Scaling group with a multi-AZ Amazon RDS database instance for storage.
#see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/sample-templates-applications-eu-west-1.html
#SEE https://github.com/awslabs/aws-cloudformation-templates/blob/master/aws/services/AutoScaling/AutoScalingRollingUpdates.yaml

Parameters:
  EC2Ami:
    Type: String
    Default: ami-015232c01a82b847b #ami-0b4b7dae3cafc3b88 #
  VpcId:
    Type: 'AWS::EC2::VPC::Id'
    Description: VpcId of your existing Virtual Private Cloud (VPC)
    ConstraintDescription: must be the VPC Id of an existing Virtual Private Cloud.
  PrivateSubnet1:
    Description: PrivateSubnet1
    Type: String
  PrivateSubnet2:
    Description: PrivateSubnet2
    Type: String
  PublicSubnet1:
    Description: PublicSubnet1
    Type: String
  PublicSubnet2:
    Description: PublicSubnet2
    Type: String
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  DBName:
    Default: wordpressdb
    Description: The WordPress database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBUser:
    NoEcho: 'true'
    Description: The WordPress database admin account username
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters LB.
  DBPassword:
    NoEcho: 'true'
    Description: The WordPress database admin account password
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
  DBRDSreference:
    Type: String
    Description: DB RDS reference xxxxx.yyyy.eu-west-1.rds.amazonaws.com
  WebServerCapacityMin:
    Default: '1'
    Description: The initial number of WebServer instances
    Type: Number
    MinValue: '1'
    MaxValue: '5'
    ConstraintDescription: must be between 1 and 5 EC2 instances.
  WebServerCapacityMax:
    Default: '5'
    Description: The initial number of WebServer instances
    Type: Number
    MinValue: '1'
    MaxValue: '5'
    ConstraintDescription: must be between 1 and 5 EC2 instances.
  WebServerCapacity:
    Default: '2'
    Description: The initial number of WebServer instances
    Type: Number
    MinValue: '1'
    MaxValue: '5'
    ConstraintDescription: must be between 1 and 5 EC2 instances.

Resources:
  LBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Load balancer traffic
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      VpcId: !Ref VpcId #LAMPesVPC.Outputs.VPC
      Tags:
      - Key: "Name"
        Value: "LBSecurityGroup" #!Ref AWS::StackName #"LAMPesASG" 
  ApplicationLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Subnets: 
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Name: 'Esempio25balancer'
      #Type: application | gateway | network
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName 
      LoadBalancerAttributes: #see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-elasticloadbalancingv2-loadbalancer-loadbalancerattributes.html
        - Key: deletion_protection.enabled
          Value: false
      SecurityGroups: 
        - !GetAtt LBSecurityGroup.GroupId
  ALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: '80'
      Protocol: HTTP
  ALBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckPath: /wordpress/wp-config.php
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref VpcId
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: 'true'
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: '30'
  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP access via port 80 locked down to the load balancer + SSH access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Ref LBSecurityGroup
#          SourceSecurityGroupId: !Select 
#            - 0
#            - !GetAtt 
#              - ApplicationLoadBalancer
#              - SecurityGroups
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
      VpcId: !Ref VpcId
  WebServerGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier:  #VPCZoneIdentifier: !Ref Subnets
      - !Ref PrivateSubnet1
      - !Ref PrivateSubnet2
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: !Ref WebServerCapacityMin
      MaxSize: !Ref WebServerCapacityMax
      DesiredCapacity: !Ref WebServerCapacity
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName 
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT15M
        WaitOnResourceSignals: true
        
  LaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      #https://github.com/awslabs/aws-cloudformation-templates/blob/master/aws/services/AutoScaling/AutoScalingRollingUpdates.yaml
      AWS::CloudFormation::Init: #'AWS::CloudFormation::Init':
        configSets:
          wordpress_install:
            - install_cfn
            - install_wordpress
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Join 
                - ''
                - - |
                    [main]
                  - stack=
                  - !Ref 'AWS::StackId'
                  - |+

                  - region=
                  - !Ref 'AWS::Region'
                  - |+

              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join 
                - ''
                - - |
                    [cfn-auto-reloader-hook]
                  - |
                    triggers=post.update
                  - >
                    path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init
                  - 'action=/opt/aws/bin/cfn-init -v '
                  - '         --stack '
                  - !Ref 'AWS::StackName'
                  - '         --resource LaunchConfig '
                  - '         --configsets wordpress_install '
                  - '         --region '
                  - !Ref 'AWS::Region'
                  - |+

              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        install_wordpress:
          packages:
            yum:
              php73: []
              php73-mysqlnd: []
              mysql57: []
#              mysql57-server: []
              mysql57-devel: []
              mysql57-libs: []
              httpd24: []
          sources:
            /var/www/html: 'http://wordpress.org/latest.tar.gz'
          files:
            /tmp/create-wp-config:
              content: !Join 
                - ''
                - - |
                    #!/bin/bash -xe
                  - >
                    mv /var/www/html/wordpress/wp-config-sample.php
                    /var/www/html/wordpress/wp-config.php
                  - sed -i "s/'database_name_here'/'
                  - !Ref DBName
                  - |
                    '/g" wp-config.php
                  - sed -i "s/'username_here'/'
                  - !Ref DBUser
                  - |
                    '/g" wp-config.php
                  - sed -i "s/'password_here'/'
                  - !Ref DBPassword
                  - |
                    '/g" wp-config.php
                  - sed -i "s/'localhost'/'
                  - !Ref DBRDSreference
                  - |
                    '/g" wp-config.php
              mode: '000500'
              owner: root
              group: root
          commands:
            01_configure_wordpress:
              command: /tmp/create-wp-config
              cwd: /var/www/html/wordpress
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
    Properties:
      ImageId: !Ref EC2Ami
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref WebServerSecurityGroup
      KeyName: !Ref KeyName
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -xe
            - |
              sudo yum update -y aws-cfn-bootstrap
            - 'sudo /opt/aws/bin/cfn-init -v '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource LaunchConfig ' #nota: corretto che qua sia LaunchConfig e non WebServerGroup
            - '         --configsets wordpress_install '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

            - 'sudo /opt/aws/bin/cfn-signal -e $? '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource WebServerGroup '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+ #nota: grep -ni 'error\|failure' $(sudo find /var/log -name cfn-init\* -or -name cloud-init\*)

Outputs:
  WebsiteURL:
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - ApplicationLoadBalancer
          - DNSName
        - /wordpress
    Description: WordPress Website
