AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Template che crea un RDS MYSQL

#see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rds-dbinstance.html
#SEE #https://octopus.com/blog/creating-rds-instance-cloudformation

Parameters:
  EngineRDS: 
    Description: Engine type of RDS
    Type: String
    Default: MySQL
    AllowedValues: 
      - MySQL
      - mariadb
      - postgres
      - aurora-mysql
      - aurora-postgresql
      #see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rds-dbinstance.html#cfn-rds-dbinstance-engine
  MultiAZDatabase:
    Default: 'false'
    Description: Create a Multi-AZ MySQL Amazon RDS database instance
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    ConstraintDescription: must be either true or false.
  DBInstanceClass:
    Description: The database instance type
    Type: String
    Default: db.t2.micro
    AllowedValues:
      - db.t1.micro
      - db.t2.micro
      - db.t2.small
    ConstraintDescription: must select a valid database instance type.
  DBPubliclyAccessible:
    Description: Flag of PubliclyAccessible
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    Default: false
  DBAllocatedStorage:
    Default: '5'
    Description: The size of the database (Gb)
    Type: Number
    MinValue: '5'
    MaxValue: '1024'
    ConstraintDescription: must be between 5 and 1024Gb.
  DBName:
    Default: 'es14db'
    Description: The database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBUser:
    Description: The database admin account username
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBPassword:
    NoEcho: 'true'
    Description: The database admin account password
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9.]*'
    ConstraintDescription: must contain only alphanumeric characters.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 999.999.999.999/99
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Choose which VPC the Application should be deployed to
  PrivateSubnet1:
    Description: Ec2SubnetId
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet2:
    Description: Ec2SubnetId
    Type: AWS::EC2::Subnet::Id
Resources:
  RDS:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      Engine: !Ref EngineRDS # MySQL
      DBName: !Ref DBName
      MultiAZ: !Ref MultiAZDatabase
      MasterUsername: !Ref DBUser
      #MasterUserPassword:  !Join [ '', [ '{{resolve:secretsmanager:', !Ref MySQLSecret, ':SecretString:password}}' ] ] 
      MasterUserPassword: !Ref DBPassword
      DBInstanceClass: !Ref DBInstanceClass
      AllocatedStorage: !Ref DBAllocatedStorage
      VPCSecurityGroups: !GetAtt RDSSecurityGroup.GroupId
      DBSubnetGroupName: !Ref RDSSubnetGroup
      Tags:
      - Key: "Name"
        Value: !Ref AWS::StackName
      PubliclyAccessible: !Ref DBPubliclyAccessible #True
      #StorageType: gp2
  RDSSubnetGroup: #https://octopus.com/blog/creating-rds-instance-cloudformation
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupName: !Ref AWS::StackName
      DBSubnetGroupDescription: "Subnet Group"
      SubnetIds: # !GetAtt LAMPesVPC.Outputs.PrivateSubnets
      - !Ref PrivateSubnet1
      - !Ref PrivateSubnet2
      Tags:
      - Key: "Name"
        Value: !Ref AWS::StackName 
  RDSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Open database for access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          CidrIp: !Ref SSHLocation #!Ref CidrBlockVPC
#        - IpProtocol: tcp
#          FromPort: '3306'
#          ToPort: '3306'
#          SourceSecurityGroupId: !GetAtt EC2wordpress.Outputs.WebServerSecurityGroup.GroupId
      VpcId: !Ref VpcId #LAMPesVPC.Outputs.VPC
      Tags:
      - Key: "Name"
        Value: !Ref AWS::StackName #"LAMPesASG" 

#https://levelup.gitconnected.com/create-aws-rds-mysql-instance-with-a-secured-master-password-using-cloudformation-template-c3a767062972
#  RDSSecretKey:
#    Type: AWS::KMS::Key
#    Properties:
#      KeyPolicy:
#        Statement:
#          - Sid: "Enable IAM User Permissions"
#            Effect: "Allow"
#            Principal:
#              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
#            Action: "kms:*"
#            Resource: "*"
#      Tags:
#      - Key: "Name"
#        Value: !Ref AWS::StackName
#  RDSSecret:
#    Type: AWS::SecretsManager::Secret
#    Properties:
#      KmsKeyId: !Ref RDSSecretKey
#      GenerateSecretString:
#        SecretStringTemplate: !Join [ '', [ '{"username": "', !Ref DBUser, '"}' ] ]
#        GenerateStringKey: 'password'
#        PasswordLength: 16
#        ExcludeCharacters: '"@/\'
#      Tags:
#      - Key: "Name"
#        Value: !Ref AWS::StackName
Outputs:
  StackName:
    Description: Deployed StackName for update
    Value: !Ref AWS::StackName
  EndpointAddress:
    Description: Rds Endpoint
    Value: !GetAtt RDS.Endpoint.Address
  EndpointPort:
    Description: Rds Endpoint Port
    Value: !GetAtt RDS.Endpoint.Port