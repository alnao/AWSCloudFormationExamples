AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Esempio26balancerEFS, template che crea una VPC, un mySql RDS, un load balancer e un autoscaling group, il sito risiede su un EFS

#SEE
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/sample-templates-applications-eu-west-1.html

Parameters:
#VPN INFO
  CidrBlockVPC:
    Description: 'The IP address range to VPC'
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.184.0.0/16
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x
  DnsServers:
    Description: 'The IP address DNS into VPC'
    Type: String
    MinLength: '9'
    MaxLength: '15'
    Default: '10.184.0.2' #123.567.901.345
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})'
    ConstraintDescription: must be a valid IP of the form x.x.x.x
  CidrBlockSubnetA:
    Description: 'The IP address range to Subnet A'
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.184.1.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  CidrBlockSubnetB:
    Description: 'The IP address range to Subnet B'
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.184.2.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  CidrBlockSubnetC:
    Description: 'The IP address range to Subnet A'
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.184.3.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  CidrBlockSubnetD:
    Description: 'The IP address range to Subnet B'
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.184.4.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  SSHLocation:
    Description: ' The IP address range that can be used to SSH to the EC2 instances'
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
#EC2 
  RegionAZ:
    Type: String
    Default: eu-west-1a
  EC2Ami:
    Type: String
    Default: ami-06d94a781b544c133 #questa AMI è ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-20230208
    #vecchia versione con linux AWS: ami-015232c01a82b847b 
  InstanceType:
    Type: String
    Default: 't2.micro'
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
  KeyName:
    Type: String
    Default: 'AlbertoNaoFormazione'
#RDS database info
  DBName:
    Default: balancerEFS
    Description: The WordPress database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBUser:
    NoEcho: 'true'
    Description: The WordPress database admin account username
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters DB.
    Default: 'esempiobalancer'
  DBPassword:
    NoEcho: 'true'
    Description: The WordPress database admin account password
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
    Default: 'alnaoBellissimo42'
#VPNendpoint
  ServerCertificateArn:
    Description: The ARN of the server certificate. For more information, see the AWS Certificate Manager User Guide.
    Type: String
    Default: arn:aws:acm:eu-west-1:XXXXXX:certificate/XXXXXX-cee1-4cb8-a8e9-XXXXXX
  SAMLProviderArn:
    Description: The Amazon Resource Name (ARN) of the IAM SAML identity provider.
    Type: String
    Default: arn:aws:iam::XXXXXX:saml-provider/SAMLProvider
  SelfServiceSAMLProviderArn:
    Description: The Amazon Resource Name (ARN) of the IAM SAML identity provider for the self-service portal.
    Type: String
    Default: arn:aws:iam::XXXXXX:saml-provider/SAMLprovider_self
  CidrBlockVPCclient:
    Description: 'The IP address range to VPC client'
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.185.0.0/16
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.

Resources:
  VPC:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.amazonaws.com/ecs-refarch-cloudformation/infrastructure/vpc.yaml
      Parameters:
        EnvironmentName: !Ref AWS::StackName #usato come tag per le risorse
        VpcCIDR: !Ref CidrBlockVPC # "10.84.0.0/16"
        PublicSubnet1CIDR: !Ref CidrBlockSubnetA # "10.84.1.0/24"
        PublicSubnet2CIDR: !Ref CidrBlockSubnetB # "10.84.2.0/24"
        PrivateSubnet1CIDR: !Ref CidrBlockSubnetC # "10.84.3.0/24"
        PrivateSubnet2CIDR: !Ref CidrBlockSubnetD # "10.84.4.0/24"
  VPNendpoint:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: "../Esempio22vpnEndpoint/vpnendpoint.yaml"
      Parameters:
        VPCid: !GetAtt VPC.Outputs.VPC
        SAMLProviderArn: !Ref SAMLProviderArn
        SelfServiceSAMLProviderArn: !Ref SelfServiceSAMLProviderArn
        CidrBlockVPC: !Ref CidrBlockVPC
        CidrBlockVPCclient: !Ref CidrBlockVPCclient
        ServerCertificateArn: !Ref ServerCertificateArn
        SSHLocation: !Ref SSHLocation
        DnsServers: !Ref DnsServers
        PrivateSubnet1: !GetAtt VPC.Outputs.PrivateSubnet1
        PrivateSubnet2: !GetAtt VPC.Outputs.PrivateSubnet2
#SecurityGroup esterni perchè servono a tutti i componenti successivi
  LBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Load balancer traffic
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      VpcId: !GetAtt VPC.Outputs.VPC
      Tags:
      - Key: "Name"
        Value: "LBSecurityGroup" #!Ref AWS::StackName #"LAMPesASG" 
  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP access via port 80 locked down to the load balancer + SSH access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Ref LBSecurityGroup
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
      VpcId: !GetAtt VPC.Outputs.VPC
#DATABASE RDS & EFS
  Database:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: "../Esempio23wordpressSingle/rdsMysql.yaml"
      Parameters:
        VpcId: !GetAtt VPC.Outputs.VPC
        DBName: !Ref DBName
        DBUser: !Ref DBUser
        DBPassword: !Ref DBPassword
        PrivateSubnet1: !GetAtt VPC.Outputs.PrivateSubnet1
        PrivateSubnet2: !GetAtt VPC.Outputs.PrivateSubnet2   
        SSHLocation: !Ref SSHLocation
  EFS:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: "../Esempio24efsEc2/efs.yaml"
      Parameters:
        FileSystemName: !Ref AWS::StackName
        VpcId:  !GetAtt VPC.Outputs.VPC
        MountTarget1Subnet: !GetAtt VPC.Outputs.PrivateSubnet1
        MountTarget2Subnet: !GetAtt VPC.Outputs.PrivateSubnet2
        OriginSecurityGroup: !Ref WebServerSecurityGroup
#Website loadbalancer and AutoScaling group
  WebSite:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: "./loadBalancer.yaml"
      Parameters:
        VpcId: !GetAtt VPC.Outputs.VPC
        PrivateSubnet1: !GetAtt VPC.Outputs.PrivateSubnet1
        PrivateSubnet2: !GetAtt VPC.Outputs.PrivateSubnet2
        PublicSubnet1: !GetAtt VPC.Outputs.PublicSubnet1
        PublicSubnet2: !GetAtt VPC.Outputs.PublicSubnet2
        SSHLocation: !Ref SSHLocation
        KeyName: !Ref KeyName
        EC2Ami: !Ref EC2Ami
        InstanceType: !Ref InstanceType
        DBName: !Ref DBName
        DBUser: !Ref DBUser
        DBPassword: !Ref DBPassword
        DBRDSreference: !GetAtt Database.Outputs.EndpointAddress
        WebServerCapacityMin: '1'
        WebServerCapacityMax: '3'
        WebServerCapacity: '2'
        EFSFileSystemId: !GetAtt EFS.Outputs.FileSystemId
        WebServerSecurityGroup: !Ref WebServerSecurityGroup
        LBSecurityGroup: !Ref LBSecurityGroup

Outputs:
  StackName:
    Description: Deployed StackName for update
    Value: !Ref AWS::StackName
  EFSFileSystemId:
    Description: EFS name
    Value: !GetAtt EFS.Outputs.FileSystemId
  DBRDSreference:
    Description: EFS name
    Value: !GetAtt Database.Outputs.EndpointAddress
  WebsiteURL:
    Description: Website public URL
    Value: !GetAtt WebSite.Outputs.WebsiteURL
